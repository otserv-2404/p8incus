pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
--todo:
--floodfill abandonado

--preencher andares 1 e 2 com
--vazio e mostrar andares
--inferiores (+- feito)

--salvar e carregar todos os
--andares 

--objetos

function _init()
 init_variables()
end

function _update()
 keyprs=stat(31)
 
 if keyprs=="a" then
  if viewx-6>0 then
   viewx-=1
  end
 elseif keyprs=="d" then
  if viewx+6<127 then
   viewx+=1
  end
 elseif keyprs=="w" then
  if viewy-6>0 then
   viewy-=1
  end
 elseif keyprs=="s" then
  if viewy+6<127 then
   viewy+=1
  end
 end
 
 if btnp(🅾️) then
  grid=not grid
 end
 
 if btnp(❎) then
  auto_tile()
 end
 
 update_cursor()
end

function _draw()
 cls(1)
 
 if currflr<=3 then
 --draw map on screen
		for h=1,currflr do
		
		 for i=1,25 do
		  for j=1,25 do
		   local xdiamtr=viewx-6+i
		   local ydiamtr=viewy-6+j
		   if xdiamtr>0   and
		      xdiamtr<129 and
		      ydiamtr>0   and
		      ydiamtr<129 then
		    mset(i-1,j-1,maps[h][xdiamtr][ydiamtr])
		   else
		    mset(i-1,j-1,76)
		   end
		  end
		 end
	  map(0,0,-4+10*(currflr-h),-4+10*(currflr-h),13,13)

		end
 
 end
 ----
 
 if grid then
  for i=1,12 do
   line(0,4+8*(i-1),96,4+8*(i-1),6)
   line(4+8*(i-1),0,4+8*(i-1),96,6)
  end
 end
 
 --cursor square indicator
 if cursorx<95 and cursory<95 then
  --if drawing ground, show
  --tile preview     
  if palst=="ground" then
   spr(tileselect+63,cursorx-(cursorx-4)%8,cursory-(cursory-4)%8)
  end
  
  rect(cursorx-(cursorx-4)%8,
       cursory-(cursory-4)%8,
       cursorx+(2^(brushsize+2))-(cursorx-4)%8,
       cursory+(2^(brushsize+2))-(cursory-4)%8,
       7)
 end
 
 line(46,46,48,48,8)
 line(48,46,46,48,8)
 
 draw_hud()
 spr(1,cursorx,cursory)
 
 --print(viewx..","..viewy,0,0,7)
 --print(mget(0,0),0,7,7)
end
-->8
--init functions
function init_variables()
 --init maps
 maps={}
 currflr=3
 
 for floor=1,6 do
  --add new floor table
  add(maps,{})
  
  --create x and y axis
  for i=1,128 do
   maps[floor][i]={}
   
   --fill with blanks
   for j=1,128 do
    --if underground, spr77
    tile=77
    --if above ground, spr93
    if floor==4 then
     tile=93
    elseif floor>4 then
     tile=95
    end
    maps[floor][i][j]=tile
   end
  end
 end
 
 
 --mapstring={}
 mapstring="x385.d8x9.76x117.d4x9.06x117.d54x8.06x118.d54x7.06x119.d4x7.06x119.d4x7.06x119.d4x7.06x119.d409x5.5cx119.dx2.5cx14969.d1"
 load_map(mapstring)
 
 
 --[[fills top and bottom 16
 --lines with solid walls
 for i=1,128 do
  for j=1,16 do
   b1map[i][j]=77
   b1map[i][129-j]=77
  end
 end
 
 --fills the rest with walkable
 --ground
 for i=1,128 do
  for j=1,96 do
   b1map[i][j+16]=64
  end
 end
 
 b1map[1][1]=65]]
 
 --mouse variables
 poke(0x5f2d,0x1)
 mousebtn_prev=false
 mouseclick=false
 
 viewx,viewy=6,6
 cursorx,cursory=0,0
 grid=false
 
 mapsel=0
 
 palst="ground"
 palpage=0
 tileselect=1
 objselect=1
 
 drawmode="pencil"
 brushsize=1
end
-->8
--update functions
function update_cursor()
 cursorx=stat(32)
 cursory=stat(33)
 
 if stat(34)==1 then
  if isinside(0,0,94,94) then
   --click inside map area
	  mapselz = currflr
	  mapselx = flr((cursorx+4)/8)-5+viewx
	  mapsely = flr((cursory+4)/8)-5+viewy
	  if drawmode=="pencil" then
	   for i=1,(4^(brushsize-1)) do
	    maps[mapselz][mapselx+ceil(i/2^(brushsize-1))-1][mapsely+i%2^(brushsize-1)] = tileselect+63	  
	   end
	  end
	 end
 
  if not mousebtn_prev then
   mousebtn_prev=true
   mouseclick=true
  else
   mouseclick=false
  end
 else
  mousebtn_prev=false
  mouseclick=false
 end
 
 if mouseclick then 
  --palette sel btn 
	 if isinside(97,30,125,36) then
	  switchpal()
	 
	 --save btn
	 elseif isinside(118,118,125,125) then
	  save_map()
	 
	 --palette page btns
	 elseif isinside(98,118,105,122) then
	  --page left
	  if palpage>0 then
	   palpage-=1
	  end
	 elseif isinside(109,118,116,122) then
	  --page right
	  if palpage<1 then
	   palpage+=1
	  end
	 --elseif isinside(65,98,72,106) then
	  --drawmode pencil
	  --drawmode="pencil"
	 end
	 
	 if palst=="ground" then
	  if isinside(75,99,80,105) then
		  brushsize=1	 
		 elseif isinside(83,99,88,105) then
		  brushsize=2
		 elseif isinside(89,99,94,105) then
		  brushsize=3
		 end
	 end
	 
	 
	 --floor up/down
	 if isinside(83,115,90,119) then
	  --floor up
	  if currflr<6 then
	   currflr+=1
	  end
	 elseif isinside(83,121,90,125) then
	  --floor down
	  if currflr>1 then
	   currflr-=1
	  end
	 end
	 
	 --tile select
	 for i=1,16 do
	  local xanchor=99+((i+1)%2)*14
   local yanchor=37+flr((i-1)/2)*10
	  if isinside(xanchor,yanchor,xanchor+9,yanchor+9) then
	   tileselect=i+palpage*16
	  end
	 end
	 
	end
end

function update_hud()
  return
end

function switchpal()
 if palst=="ground" then
  palst="object"
  brushsize=1
 elseif palst=="object" then
  palst="chara"
 else
  palst="ground"
 end
end
--auto tiler is benched for now
--[[function auto_tile()
 --auto change wall tiles
 --around ground tiles to be
 --the corresponding wall
 for i=1,128 do
  for j=1,128 do
   --this process looks for
   --ground tiles around every
   --wall tile and gets which
   --tiles are ground
   --(currently, spr68 and above
   --are wall tiles)
   if b1map[i][j]>=68 then
	   local bitsum=0
	   for n=1,3 do
	    for m=1,3 do
	     if i+n-2<=0 or j+m-2<=0 or
	        i+n-2>128 or j+m-2>128 then
	      --out of bounds
	      --add nothing
	     else
	      --printh(i..","..j.."\t"..n..","..m)
	      if b1map[i+n-2][j+m-2]<68 then
	       bitsum+=2^(n+(m*3)-4)
	      end
	     end
	    end
	   end
	   if 0x7&bitsum <= 0x7 and 0x7&bitsum~=0 then
	    b1map[i][j]=70
	   elseif 0x1c0&bitsum >= 0x40 then
	    b1map[i][j]=68
	   end
	  end
  end
 end
end]]
-->8
--draw functions
function draw_hud()
 -- bottom rectangle
 rectfill(0,95,94,127,5)
 rect(0,95,95,127,6)
 
 print("sel: ",3,99,7)
 rectfill(21,97,30,106,0)
 spr(mapsel,22,98)
 --print(cursorx..","..cursory,3,104,7)
 

 -- side rectangle
 rectfill(95,0,127,127,5)
 rect(95,0,127,127,6)
 
 local palbtn_txt
 local plabtn_clr
 if palst=="ground" then
  palbtn_txt="ground"
  palbtn_clr=3
  
  --palette sprites
  for i=1,16 do
   local xanchor=99+((i+1)%2)*14
   local yanchor=37+flr((i-1)/2)*10
   rectfill(xanchor,yanchor,xanchor+9,yanchor+9,0)
   spr(63+i+(palpage*16),xanchor+1,yanchor+1)
  
   if i==tileselect-palpage*16 then
    rect(xanchor,yanchor,xanchor+9,yanchor+9,8)
   end
  end
  
 elseif palst=="object" then
  palbtn_txt="object"
  palbtn_clr=1
  
  --object sprites
  for i=1,8 do
	  sspr((96%16)*8,flr(96/16)*8,16,16,96,38)
	  sspr((98%16)*8,flr(98/16)*8,16,16,111,38)
	  
	  --rect(8)
  end
  
 elseif palst=="chara" then
  palbtn_txt="chara"
  palbtn_clr=2
 end
 
 --palette select button
 rectfill(97,30,125,36,palbtn_clr)
 print(palbtn_txt,100,31,7)
 
 --palette change page btn
 print("⬅️ ➡️",98,118,7)
 
 --drawmode
 --pencil button
 spr(3,65,98)
 
 --brush size indicator
 line(76,102,92,102,7)
 for i=1,3 do
  line(68+8*i,101,68+8*i,103,7)
 end
 spr(4,65+brushsize*8,95)
 
 --floor indicator
 print("floor:"..currflr-4,63,109,7)
 print("⬆️",83,115)
 print("⬇️",83,121)
 for i=1,6 do
  flrind_clr=7
  if i==currflr then
   flrind_clr=8
  end
  rectfill(62+2*i,121-i,67+2*i,126-i,flrind_clr)
  rect(62+2*i,121-i,67+2*i,126-i,1)
 end
 
 
 draw_minimap(maps[currflr])
 
 --draw save icon
 spr(2,118,118)

end

function draw_minimap(currmap)
 rect(98,2,124,28,0)
 
 for i=1,25 do
  for j=1,25 do
   --get map pos around view
   local mapx=viewx+i-13
   local mapy=viewy+j-14
   --if inbound
   if mapx>0 and mapy>0 and 
      mapx<=128 and mapy<=128 then
    --get spr num
    tile=currmap[mapx][mapy]
   else
    --set spr to empty tile
    tile=79
   end
   
   --draw individual pixels on
   --minimap
   local pcolor
   if tile==77 or tile==79 then
    pcolor=0 --black
   elseif tile==93 then
    pcolor=1 --dark blue
   elseif fget(tile,0) and fget(tile,7) then
    pcolor=2 --purple
   elseif fget(tile,5) then
    pcolor=10 --yellow
   elseif fget(tile,1) then
    pcolor=4 --brown
   elseif fget(tile,2) then
    pcolor=6 --light grey
   elseif fget(tile,3) then
    pcolor=3 --dark green
   end
   
   pset(98+i,2+j,pcolor)
  end
 end
end
-->8
--support functions
function save_map()
 printh("mapfile r2!","map.txt",true,true)
 for h=1,#maps do
	 local str=""
	 printh("floor"..h-4,"map.txt",false,true)
	 local prev=0
	 local ctr=0
	 
	 for i=1,128 do
	  for j=1,128 do
	   
	   tile=maps[h][i][j]
	   if tile~=prev or (i==128 and j==128) then
	    if ctr>1 then
	     str=str.."x"..tostr(ctr).."."..tostr(spntompc(prev))
	     ctr=1
	    else
	     if ctr~=0 then
	      str=str..tostr(spntompc(prev))
	     else
	      ctr=1
	     end
	    end
	   else
	    ctr+=1
	   end
	   prev=tile
	   
	  end
	 end
	 
	 str=str..tostr(prev-64)
	 printh(str,"map.txt",false,true)
 end
 printh("map saved")
end

function load_map(mapstring)
 printh("\ninit load_map\n")
 
 --todo
 --parse text
 --insert into map table
 maparray={}
 buffer=""
 --run through the mapstring
 i=1
 while i<=#mapstring do
  printh(i)
  readahead=0
  --grab ith position char
  buffer=sub(mapstring,i,i)
  --if char is not x, it's a
  --single tile number
  if buffer!="x" then
   --convert tilenumber to
   --corresp. tile on sprsheet
   --and add to linear maparray
   add(maparray,mpctospn(buffer)+64)
   printh("loaded spr "..(mpctospn(buffer)+64))
  --otherwise, it's a multiple
  --tile indicator (x)
  else
   --ignore x, jump to next
   i+=1
   --find index of .
   while buffer!="." do
    readahead+=1
    buffer=sub(mapstring,i+readahead,i+readahead)
   end
   --index found, get substring
   --of i and before .
   buffer=sub(mapstring,i,i+readahead-1)
   --advance i to after .
   i+=readahead+1
   --make integer of repetitions
   printh("found "..buffer.." sprs")
   n=tonum(buffer)
   for j=1,n do
    add(maparray,mpctospn(sub(mapstring,i,i))+64)
    printh("loaded spr "..(mpctospn(sub(mapstring,i,i))+64).." "..j.." of "..n)
   end
  end
  i+=1
 end
 
 --send message after loading
 printh("loaded "..#maparray.." bytes of map data.")
 for i=1,128 do
  for j=1,128 do
   maps[currflr][i][j]=maparray[(i-1)*128+j]
  end
 end
end

-- sprite number to map code
-- substitutes hex(v)
function spntompc(v) 
 if v>=64 and v<74 then
  return v-64
 else
  return chr(v-9)
 end
end

-- map code to sprite number
-- substitutes hextodec(v)
function mpctospn(v)
 n=ord(v)
 if n>57 then
  n-=39
 end
 return n-48
end

function isinside(x1,y1,x2,y2)
 return (cursorx>=x1 and
         cursorx<=x2 and
         cursory>=y1 and
         cursory<=y2)
end


function mapfill(z,x,y,nt)
-- map z,x,y
-- ot=old tile
-- nt=new tile
 local ot=maps[z][x][y]
 if (ot==nt) return
 local queue={}
 
 function fill2(x,y,depth)
  printh("fill2:"..x..","..y.." depth:"..depth)
  if maps[z][x][y]==ot then
	  queue[#queue+1]=x*128+y
	  maps[z][x][y]=nt
	  if (x>1)   fill2(x-1,y,depth+1)
	  if (x<128) fill2(x+1,y,depth+1)
	  if (y>1)   fill2(x,y-1,depth+1)
	  if (y<128) fill2(x,y+1,depth+1)
  end
 end
 fill2(x,y,0)
 
 local q,a,b
 for i=1,#queue do
  q=queue[i]
  a=flr(q/128)
  b=q-a*128
  maps[z][a][b]=nt
 end
end
__gfx__
00000000010000001111111000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000171000001266262100007770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700177100001266262100077777111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000177710001266662100777770177777710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000177771001222222107077700017777100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700177110001222222107007000001771000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000011710001222222107770000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000001111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4444444444444444455555d4665ddd56252d52255222222255455555d5dd55dd552d522545555554255dd5445455554422222222222222222222222200000000
44444444444422245d111d5d665ddd56d555d55552222222225222225d55d5555555d55552252225ddd55d545d55d55422222222222222222000000200000000
4444442442244224511111d555555555d555d555522222222222222255dd5d54dd55d55552222222d55d55d455dd5d5422222222222222222000000200000000
4444444444224442d1111115ddd566655d555d5545222222222222222555d5dd55d55d55522222225d55d5542555d5dd22222222222222222000000200000000
44444444444424445111111dddd566655d555d55522222222222222255555d55255d5d55452222225d555d5455555d5522222222222222222000000200000000
44444444422242445d1111d555556665d5d555d55222222222222222dd5555dddd55d5d552222222d5d555d4dd5555dd22222222222222222000000200000000
4244444442244224d5d11d5d666566655d5d555d522222222222222255dd555425dd5d5d522222224d5d454455dd555421222222212222222000000200000000
4444444444444444445555d4665555565d45d54d52222222222222222555d5555555d5d452222222444444442555d55522222222222222222222222200000000
333333336666666624444444122212229994999494999999ff9fffff000000000000000000000000000000000000000044444444111111114444444400000000
3333333355566655444242421222122299949994949999999ffffff9000000000000000000000000000000000000000049211294111111c14000000400000000
3333b3b35555655544242444122212229994999444444444ffffff9f00000000000000000000000000000000000000004921129411111c1c4000000400000000
33333b335556665544444444211121119994444499999994ffff99ff000000000000000000000000000000000000000042921124111111114000000400000000
333333336666666642424444221222129994999499999994fffffff900000000000000000000000000000000000000004292222411c111114000000400000000
333333336665555524244424221222124444999499999994ff9fffff0000000000000000000000000000000000000000412999941c1c11114000000400000000
3b3b3333565555554444424222122212999499944444444499ffff9f000000000000000000000000000000000000000041129224111111114000000400000000
33b333336665555544444444112111219994999494999999fffff9ff000000000000000000000000000000000000000044444444111111114444444400000000
22222222000000000200002000000000fffffff400000000ff00000000000000000000ff00000000111110000000000000000000000000000000000000000000
2ffffff2200000002920029200000000fffffff440000000fff0000000000000000000fff00000001b33b1100000011100000000000000000000000000000000
2fffffff2200000029200292000000000fffffff44000000ffff000000000000000000ffff0000001333b3b110011ddd10000000000000000000000000000000
02222222f2200000029200292000000000fffffff4400000fffff00000000000000000fffff00000133b3333b111ddd7d1000000000000000000000000000000
02ffffff2f2200000292222920000000000fffffff440000ffffff0000000000000000ffffff000013b333b3b11ddddd7d100000000000000000000000000000
02fffffff2f2200000299999920000000000fffffff44000fffffff000000000000000fffffff000013333b31015dddddd100000000000000000000000000000
0022222222ff2200000292222920000000000fffffff4400ffffffff00000000fffffff4ffffff000133b33310155ddddd100000000000000000000000000000
0002ffffff2ff2200002920029200000000000fffffff44044fffffff0000000fffffff44ffffff000133334411155dddd100000000000000000000000000000
0002fffffff2ff2200002922229200000000000fffffff44044fffffff0000000fffffff44ffffff0013b1124100155551000000000000000000000000000000
000022222222fff2000002999999200000000000fffffff40044ffffff00000000fffffff44fffff000110011100011110000000000000000000000000000000
000002ffffff2ff20000002922229200000000000000000000044fffff000000000fffffff44ffff000000000000000000000000000000000000000000000000
000002fffffff2f200000002920029200000000000000000000044ffff0000000000fffffff44fff000000000000000000000000000000000000000000000000
00000022222222f2000000029222292000000000000000000000044fff00000000000fffffff44ff000000000000000000000000000000000000000000000000
00000002ffffff220000000029999292000000000000000000000044ff000000000000fffffff44f000000000000000000000000000000000000000000000000
00000002fffffff200000000292222920000000000000000000000044f0000000000000fffffff44000000000000000000000000000000000000000000000000
000000002222222200000000020000200000000000000000000000004400000000000000fffffff4000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002022004818181818181818181012000080404040404000000000000000100000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000565656565600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4c4c4c4c4c4c4c4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4c48444444444445000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
484a404040404045000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4740404040404145000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4c4b404142404045000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4c47404343434345000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4c4740434343494c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4c4c464646464c4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
