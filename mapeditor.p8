pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
function _init()
 poke(0x5f2d,0x1)
 init_variables()
end

function _update()
 if btnp(‚¨ÖÔ∏è) then
  if viewx-6>0 then
   viewx-=1
  end
 elseif btnp(‚û°Ô∏è) then
  if viewx+6<127 then
   viewx+=1
  end
 elseif btnp(‚¨ÜÔ∏è) then
  if viewy-6>0 then
   viewy-=1
  end
 elseif btnp(‚¨áÔ∏è) then
  if viewy+6<127 then
   viewy+=1
  end
 end
 
 if btnp(üÖæÔ∏è) then
  grid=not grid
 end
 
 if btnp(‚ùé) then
  auto_tile()
 end
 
 update_cursor()
end

function _draw()
 cls(1)
 
 for i=1,25 do
  for j=1,25 do
   local xdiamtr=viewx-6+i
   local ydiamtr=viewy-6+j
   if xdiamtr>0   and
      xdiamtr<129 and
      ydiamtr>0   and
      ydiamtr<129 then
    mset(i-1,j-1,b1map[xdiamtr][ydiamtr])
   else
    mset(i-1,j-1,76)
   end
  end
 end
 
 map(0,0,-4,-4,13,13)
 if grid then
  for i=1,12 do
   line(0,4+8*(i-1),96,4+8*(i-1),6)
   line(4+8*(i-1),0,4+8*(i-1),96,6)
  end
 end
 
 if cursorx<95 and cursory<95 then
  rect(cursorx-(cursorx-4)%8,cursory-(cursory-4)%8,cursorx+8-(cursorx-4)%8,cursory+8-(cursory-4)%8,7)
 end
 
 line(46,46,48,48,8)
 line(48,46,46,48,8)
 
 draw_hud()
 spr(1,cursorx,cursory)
 
 print(viewx..","..viewy,0,0,7)
 print(mget(0,0),0,7,7)
end
-->8
--init functions
function init_variables()
 --init bf1 map
 b1map={}
 
 mapstring="1x15dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x32dx960x15d"
 for i=1,128 do
  b1map[i]={}
 end
 
 --fills top and bottom 16
 --lines with solid walls
 for i=1,128 do
  for j=1,16 do
   b1map[i][j]=77
   b1map[i][129-j]=77
  end
 end
 
 --fills the rest with walkable
 --ground
 for i=1,128 do
  for j=1,96 do
   b1map[i][j+16]=64
  end
 end
 
 b1map[1][1]=65
 
 viewx,viewy=6,6
 cursorx,cursory=0,0
 grid=false
 
 mapsel=0
end
-->8
--update functions
function update_cursor()
 cursorx=stat(32)
 cursory=stat(33)
 
 if stat(34)==1 and cursorx<95 and cursory<95 then
  mapsel=mget(flr((cursorx-4)/8)-5+viewx,flr((cursory-4)/8)-5+viewy)
 end
 
 if stat(34)==1  and
    cursorx>=118 and
    cursorx<=125 and
    cursory>=118 and
    cursory<=125 then
  save_map()
 end
end

--auto tiler is benched for now
--[[function auto_tile()
 --auto change wall tiles
 --around ground tiles to be
 --the corresponding wall
 for i=1,128 do
  for j=1,128 do
   --this process looks for
   --ground tiles around every
   --wall tile and gets which
   --tiles are ground
   --(currently, spr68 and above
   --are wall tiles)
   if b1map[i][j]>=68 then
	   local bitsum=0
	   for n=1,3 do
	    for m=1,3 do
	     if i+n-2<=0 or j+m-2<=0 or
	        i+n-2>128 or j+m-2>128 then
	      --out of bounds
	      --add nothing
	     else
	      --printh(i..","..j.."\t"..n..","..m)
	      if b1map[i+n-2][j+m-2]<68 then
	       bitsum+=2^(n+(m*3)-4)
	      end
	     end
	    end
	   end
	   if 0x7&bitsum <= 0x7 and 0x7&bitsum~=0 then
	    b1map[i][j]=70
	   elseif 0x1c0&bitsum >= 0x40 then
	    b1map[i][j]=68
	   end
	  end
  end
 end
end]]
-->8
--draw functions
function draw_hud()
 -- bottom rectangle
 rectfill(0,95,94,127,5)
 rect(0,95,94,127,6)
 
 print("sel: ",3,99,7)
 rectfill(21,97,30,106,0)
 spr(mapsel,22,98)
 --print(cursorx..","..cursory,3,104,7)
 

 -- side rectangle
 rectfill(95,0,127,127,5)
 rect(95,0,127,127,6)
 
 --draw save icon
 spr(2,118,118)

end
-->8
--support functions
function save_map()
 local str=""
 printh("map z:-1!","map.txt",true,true)
 local prev=0
 local ctr=0
 
 for i=1,128 do
  for j=1,128 do
   
   tile=b1map[i][j]
   if tile~=prev or (i==128 and j==128) then
    if ctr>1 then
     str=str.."x"..tostr(ctr).."."..tostr(hex(prev-64))
     ctr=1
    else
     if ctr~=0 then
      str=str..tostr(hex(prev-64))
     else
      ctr=1
     end
    end
   else
    ctr+=1
   end
   prev=tile
   
  end
 end
 
 str=str..tostr(prev-64)
 printh(str,"map.txt",false,true)

 printh("map saved")
end

function load_map()
 --todo
 --parse text
 --insert into map table
 return
end

-- felice ‚Ä¢ 2018-03-08 07:24*
-- bbs
function hex(v) 
  local s,l,r=tostr(v,true),3,11
  while(ord(s,l)==48) l+=1
  while(ord(s,r)==48) r-=1
  return sub(s,min(l,6),r>7 and r or 6)
end
__gfx__
00000000010000001111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000171000001266262100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700177100001266262100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000177710001266662100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000177771001222222100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700177110001222222100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000011710001222222100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000001111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4444444444444444455555d4665ddd56252d52255222222255455555d5dd55dd552d522545555554255dd5445455554422222222222222220000000000000000
44444444444422245d111d5d665ddd56d555d55552222222225222225d55d5555555d55552252225ddd55d545d55d55422222222222222220000000000000000
4444442442244224511111d555555555d555d555522222222222222255dd5d54dd55d55552222222d55d55d455dd5d5422222222222222220000000000000000
4444444444224442d1111115ddd566655d555d5545222222222222222555d5dd55d55d55522222225d55d5542555d5dd22222222222222220000000000000000
44444444444424445111111dddd566655d555d55522222222222222255555d55255d5d55452222225d555d5455555d5522222222222222220000000000000000
44444444422242445d1111d555556665d5d555d55222222222222222dd5555dddd55d5d552222222d5d555d4dd5555dd22222222222222220000000000000000
4244444442244224d5d11d5d666566655d5d555d522222222222222255dd555425dd5d5d522222224d5d454455dd555421222222212222220000000000000000
4444444444444444445555d4665555565d45d54d52222222222222222555d5555555d5d452222222444444442555d55522222222222222220000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222222000000000100001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2ffffff2200000001910019100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2fffffff220000001910019100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02222222f22000000191001910000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02ffffff2f2200000191111910000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02fffffff2f220000019999991000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0022222222ff22000001911119100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0002ffffff2ff2200001910019100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0002fffffff2ff220000191111910000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000022222222fff20000019999991000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000002ffffff2ff20000001911119100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000002fffffff2f20000000191001910000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000022222222f20000000191111910000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000002ffffff220000000019999191000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000002fffffff20000000019111191000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000222222220000000001000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000565656565600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4c4c4c4c4c4c4c4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4c48444444444445000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
484a404040404045000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4740404040404145000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4c4b404142404045000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4c47404343434345000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4c4740434343494c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4c4c464646464c4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
