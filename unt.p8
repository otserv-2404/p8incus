pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
function _init()
 t=0
 gtick=0
 
 movq={}
 msglist={}
 
 movsize=8
 fpt=10 // frames per tick
 
 --player variables
 -- global position
 p={x=128,
    y=136,
    
    --sprite position
    spx=128,
    spy=136,
    --sprite number
    sp=1,
    
    speed=4,
    
    lv=2,
    exp=100,
    
    hpm=155,
    hp=155,
    mpm=5,
    mp=5,
    
    ismov=false,
    movdir=nil,
    movt=nil}
 
 
 --enemy variables
 ex=144
 ey=128
 esprx=144
 espry=128
 espr=4
 espeed=4 --px per tick
 
 elv=1
 ehpmax=50
 ehp=10
 empmax=0
 emp=0
 
 --enemy is moving state
 eismov=false
 emovdir=nil
 emovt=nil
 
 // debug
 moveto=64
 ispassbl=0
end

function _update60()
 if t%fpt==0 then
  updatetick()
 end
 
 updateanim()
 
 // queue movement
 if btnp(⬅️) then
  qmove("left")
 end
 if btnp(➡️) then
  qmove("right")
 end
 if btnp(⬆️) then
  qmove("up")
 end
 if btnp(⬇️) then
  qmove("down")
 end
 
 if btnp(🅾️) then
  send_message(p.spx,p.spy,"hail pico-8!","player")
 end
 
 t+=1
end

function _draw()
 cls(1)
 
 map()
 
 // draws the player sprite with
 // a slight offset, so the spr
 // base(bottomright corner) is
 // centered on the tile
 --draw_outline(pspr,psprx-2,pspry-2,1)
 
 --draw enemy
 --draw_outline(espr,esprx-2,espry-2,1)
 --enemy hp bar
 enebarclr=11
 if (ehpmax*25/100)>=ehp then
  enebarclr=8
 elseif (ehpmax*50/100)>=ehp then
  enebarclr=9 
 end
 rectfill(esprx-2,espry-7,esprx+6,espry-5,0)
 if ehp>0 then
  line(esprx-1,espry-6,esprx-1+flr(ehp*6/ehpmax),espry-6,enebarclr)
 end
 
 draw_spr_ordered()
 
 --draw wall
 --sspr(0,40,10,10,112-2,136-2)
 
 --set the camera around 6 tiles
 --from the player + 1/2 tile
 --having a fov of radius 7
 camx=p.spx-48+4
 camy=p.spy-48+4
 camera(camx,camy)
 
 draw_msg()
 
 draw_hud()
 
 // debug
 --print("frame:"..t,camx,camy,7)
 // actual player position
 //rect(px,py,px+8,py+8,8)
 // desired move to dest
 --print("sprn: "..moveto.." flag0: "..tostring(ispassbl),camx,camy+7,7)
end





function qmove(dir)
 // responsible for managing
 // the movement queue
 
 // max n of queue movement
 qmax=2
 
 // clears the movement queue 
 if dir=="clear" then
  deli(movq,1)
  return
 end
 
 // if the queue is empty
 if #movq<1 then
  add(movq,dir)
 // if the queue has only one
 // element
 elseif #movq<qmax then
  add(movq,dir)
 else
  deli(movq,1)
  add(movq,dir)
 end
end

function move(dir)
 // executes movement
 
 // movement vector
 movvec={0,0}
 if dir=="left" then
  movvec[1]=-movsize
 elseif dir=="right" then
  movvec[1]=movsize
 elseif dir=="up" then
  movvec[2]=-movsize
 elseif dir=="down" then
  movvec[2]=movsize
 end
 
 moveto=mget((p.x+movvec[1])/8,(p.y+movvec[2])/8)
 // is movement possible?
 // gets passable flag from map
 ispassbl=not fget(moveto,0)
 
 // if player isnt already
 // moving
 // and
 // terrain is walkable
 if not p.ismov and ispassbl then
	 p.ismov=true
	 p.movt=t
	 p.movdir=dir
	 
	 p.x+=movvec[1]
	 p.y+=movvec[2]
	end
end

function send_message(x,y,msg,usr)
--sends a message(msg)
--at location x,y
--with optional user(usr)
--as "<usr> says:"
 add(msglist,{gtick,x,y,msg,usr})
 
end
-->8
--init functions
-->8
--update functions
function updatetick()
 // if there's movement queued
 // execute movement and clear
 // queue
 if #movq>0 then
  move(movq[1])
  qmove("clear")
 end
 
 update_msg()
 
 gtick+=1
end

function updateanim()
 // check if anim should be
 // playing
 if p.ismov then
  dt=t-p.movt
  p.sp=(dt/(p.speed*2))%2+2
  // anim progress is def by
  // delta time /
  // (frames per tick / speed)
  if p.movdir=="left"then
   p.spx=p.x+movsize-(dt/(fpt/p.speed))
  elseif p.movdir=="right" then
   p.spx=p.x-movsize+(dt/(fpt/p.speed))
  elseif p.movdir=="up" then
   p.spy=p.y+movsize-(dt/(fpt/p.speed))
  elseif p.movdir=="down" then
   p.spy=p.y-movsize+(dt/(fpt/p.speed))
  end
  
  --end movement
  if dt>=movsize*(fpt/p.speed) then
   p.ismov=false
   --snap sprite to actual pos
   --so it doesnt overshoot
   if p.spx~=p.x then p.spx=p.x end
   if p.spy~=p.y then p.spy=p.y end
  end
 else
  p.sp=1
 end
end

function update_msg()
--maintenance of messages
--erases old messages

 --timeout of 30 game ticks
 --or 5 secs
 msgtimeout=30
 
 --flag to clean the oldest msg
 isdel=false

 if #msglist > 0 then
  for i=1,#msglist do
   if gtick-msglist[i][1]>msgtimeout then
    isdel=true
   end
  end
  
  if isdel then
   deli(msglist,1)
  end
 end
end
-->8
--draw functions
function draw_spr_ordered()
 objlist={}
 --add player
 obj=p
 add(objlist,obj)
 
 --add enemy
 obj={sp=espr,x=ex,y=ey,spx=esprx,spy=espry,bar=true}
 add(objlist,obj)
 
 --[[add walls
 walls={{26,17},{27,17},{28,17},{29,17}}
 for i,v in ipairs(walls) do
  obj={sp=80,x=8*v[1],y=8*v[2],spx=112,spy=136}
  add(objlist,obj)
 end]]
 
 --[[for i=1,4 do
  obj={}
  obj={sp=80,x=8*(25+i),y=8*16,spx=112,spy=136}
  add(objlist,obj)
 end]]
 
 qsort(objlist,function(a,b) return a.y<b.y end)
 
 for i=1,#objlist do
  drwobj=objlist[i]
  --if its a character
  if drwobj.sp<80 then
   draw_outline(drwobj.sp,drwobj.spx-2,drwobj.spy-2,1)
  --if its scenery
  else
   sspr((drwobj.sp%16)*8,(drwobj.sp/16)*8,10,10,drwobj.x-2,drwobj.y-2)
  end
 end
end

function draw_hud()
 -- bottom rectangle
 rectfill(camx+0,camy+127-32,camx+127-33,camy+127,5)
 rect(camx+0,camy+127-32,camx+127-33,camy+127,6)

 -- side rectangle
 rectfill(camx+127-32,camy+0,camx+127,camy+127,5)
 rect(camx+127-32,camy+0,camx+127,camy+127,6)
 
 draw_minimap()
 draw_hpmpbars()
 
end

function draw_minimap()

 --minimap size=25
 --draw minimap border
 rect(camx+98,camy+2,camx+124,camy+28,0)
 
 for i=1,25 do
  for j=1,25 do
   --gets sprnum for 12x12
   --around player
   tile=mget((p.x+(-104+i*8))/8,(p.y+(-104+j*8))/8)
   --if flag 0(unwalkable terr)
   --draw a blue dot if water,
   --draw a red dot otherwise.
   --
   --if walkable terrain
   --draw a green dot
   if fget(tile,0) then
    if fget(tile,7) then
     pset(camx+98+i,camy+2+j,1)
    else
     pset(camx+98+i,camy+2+j,8)
    end
   else
    pset(camx+98+i,camy+2+j,11)
   end
  end
 end
 
 line(camx+127-32+3+12,camy+3+13,camx+127-32+3+14,camy+3+13,7)
 line(camx+127-32+3+13,camy+3+12,camx+127-32+3+13,camy+3+14,7)
 line()
end

function draw_hpmpbars()
 --draw hp
 p8("♥",camx+97,camy+31,8)
 rectfill(camx+105,camy+30,camx+125,camy+36,0)
 if p.hp>0 then
  rectfill(camx+106,camy+31,camx+105+ceil(p.hp*19/p.hpm),camy+35,8)
 end
 print(p.hp,camx+107,camy+31,7)
 
 p8("✽",camx+97,camy+39,12)
 rectfill(camx+105,camy+38,camx+125,camy+44,0)
 if p.mp>0 then
  rectfill(camx+106,camy+39,camx+105+ceil(p.mp*19/p.mpm),camy+43,12)
 end
 print(p.mp,camx+107,camy+39,7)
end

function draw_msg()
 if #msglist > 0 then
  for i=1,#msglist do
   if msglist[i][5] then
    p8(msglist[i][5].." says:",msglist[i][2],msglist[i][3],10)
   end
   p8(msglist[i][4],msglist[i][2],msglist[i][3]+7,10)
  end
 end
end
-->8
--support functions
function p8(s,...)
--function copied from user:
-- drakeblue
--https://www.lexaloffle.com/bbs/?tid=45020

--21 tokens print with outline
for i in all(split'\-f\f0,\-h\f0,\|f\f0,\|h\f0') do
?i..s,...
end
?s,...
end

---------------------------------
-- https://ko-fi.com/achiegamedev

-- draw the myspr sprite at x and y with a 1 pixel
-- wide outline of clr. if clr is not given on the call
-- default 7 is used instead. thickness is how thick the outline
-- should be in pixels. defaults to 1 if none given
function draw_outline(myspr, x, y, clr, thickness, x_size, y_size, flip_h, flip_v)
    -- nil check for few parameters so you can
    -- call much simple versions of the function, see first example in draw
    -- nil is false if checked for boolean so flip_h and flip_v can stay nil
    if (clr == nil) clr = 7
    if (thickness == nil) thickness = 1 
    if (x_size == nil) x_size = 1    
    if (y_size == nil) y_size = 1 
    
    -- set color palette to outline
    for i=1,15,1 do
        pal(i, clr)
    end

    -- handle black outline transparency issues
    if clr == 0 then
        palt(0, false)
    end

    -- draw the sprite 9 times by 1-1 offsets
    -- in each direction. the created blob is 
    -- which is the sprite's outline 
    for i=-thickness,thickness do
        for j=-thickness,thickness do
            spr(myspr, x-i, y-j, x_size, y_size, flip_h, flip_v)
        end
    end

    -- reset black color transparency
    if clr == 0 then
        palt(0, true)
    end

    -- reset color palette, if you are using
    -- a custom palette reset to that
    pal()

    -- draw the original sprite in the middle
    -- which causes the outline effect
    spr(myspr, x, y, x_size, y_size, flip_h, flip_v)
end

function qsort(a,c,l,r)
 c,l,r=c or function(a,b) return a<b end,l or 1,r or #a
 if l<r then
  if c(a[r],a[l]) then
   a[l],a[r]=a[r],a[l]
  end
  local lp,k,rp,p,q=l+1,l+1,r-1,a[l],a[r]
  while k<=rp do
   local swaplp=c(a[k],p)
   -- "if a or b then else"
   -- saves a token versus
   -- "if not (a or b) then"
   if swaplp or c(a[k],q) then
   else
    while c(q,a[rp]) and k<rp do
     rp-=1
    end
    a[k],a[rp],swaplp=a[rp],c(a[rp],p)
    rp-=1
   end
   if swaplp then
    a[k],a[lp]=a[lp],a[k]
    lp+=1
   end
   k+=1
  end
  lp-=1
  rp+=1
  -- sometimes lp==rp, so
  -- these two lines *must*
  -- occur in sequence;
  -- don't combine them to
  -- save a token!
  a[l],a[lp]=a[lp],a[l]
  a[r],a[rp]=a[rp],a[r]
  qsort(a,c,l,lp-1       )
  qsort(a,c,  lp+1,rp-1  )
  qsort(a,c,       rp+1,r)
 end
end
__gfx__
0000000000aaa00000aaa00000aaa000003330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000ffa00000ffa00000ffa000003330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000111100001111000011110000443300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700000111110001111f000111110003444300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000001111f00011114000f1111f003444300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070000f044400f10444000004440003022200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000004440000044500000454000002220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000550000005000000005000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333666666662444444444444444333bb33311111ccc99949994000000000000000000000000000000000000000000000000000000000000000000000000
333333335555655544424242444222443bbbbbb3111cccc199949994000000000000000000000000000000000000000000000000000000000000000000000000
3333b3b35555655544242444442222443bbbbbb31111111199949994000000000000000000000000000000000000000000000000000000000000000000000000
33333b33555565554444444442222224bbbbbbbb1111111199944444000000000000000000000000000000000000000000000000000000000000000000000000
333333336666666642424444422222243bbbbbb3111c111199949994000000000000000000000000000000000000000000000000000000000000000000000000
333333335655555524244424222552223334433311ccc11144449994000000000000000000000000000000000000000000000000000000000000000000000000
3b3b333356555555444442424222252433344333cccc111199949994000000000000000000000000000000000000000000000000000000000000000000000000
33b3333356555555444444444442244433444433111111c199949994000000000000000000000000000000000000000000000000000000000000000000000000
fffffff4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
fffffff4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
fffffff4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ffffffff400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0fffffff400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0fffffff400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0fffffff400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00fffffff40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00fffffff40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00fffffff40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
54545454545454545454545454545400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
54545454545454545454545454545400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
54545454545454545454545454545400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
54545454545454545454545454545400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
54545454545454545454545454545400000000000000000000000054545454540000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
54545454545454545454545454545454545454545454545454545454545454000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000005454545400000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001018100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454045454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545404040404040454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454540404040404040404040404040404040454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454540404041414141414141414140404040404045454545454545404040454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454540404041414040404040404141444141414040404545404040404045454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454040404040414040404040404041414140414141404040404040404045454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454540404440414044404040404040424242404041414040404044404045454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545404040414040404040404042424342424040414141404040404545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545404040414040404044404242434242464646464041404040404545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545404040414141414140404243434242464646464041404040454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545404040404040404140404242424240464646464141404040454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545404040404440404140404040404040464646464140404040454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454540404040404140404040444040404141414140404545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545404140404040404040404140404040454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545404141414141414141414140404040454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454040404040404040404040404040404045454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454040404044404040404040404045454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454540404040404040404040454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454540404040404040454545454545454545454545454545454545454545454545454545450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4545454545454545454545454545454545454545454545454545454545454545454545454545454545454545000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
